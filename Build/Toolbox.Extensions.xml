<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Toolbox.Extensions</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Generic.TCollections">
            <summary>
            Provides useful extensions to various generic collection classes
            </summary>
        </member>
        <member name="M:System.Collections.Generic.TCollections.GetOrNullR``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Safer getter for dictionary that returns null on non-existant key for
            reference types
            </summary>
        </member>
        <member name="M:System.Collections.Generic.TCollections.GetOrNullV``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Safer getter for dictionary that returns default on non-existant key for value
            types
            </summary>
        </member>
        <member name="M:System.Collections.Generic.TCollections.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Implementation of AddRange for ISets
            </summary>
        </member>
        <member name="T:System.TConsole">
            <summary>
            Provides additional thread-safe methods for writing to the console using colors
            and other fancy formatting
            </summary>
        </member>
        <member name="M:System.TConsole.WriteBlock(System.Action)">
            <summary>
            Executes a block of code (a return-less and parameter-less Action delegate)
            with newlines before and after the block
            </summary>
        </member>
        <member name="M:System.TConsole.WriteBlock(System.String,System.Object[])">
            <summary>
            Writes text to console with a pre- and post-fix newline
            </summary>
        </member>
        <member name="M:System.TConsole.WriteBlockColored(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes colored text to console with a pre- and post-fix newline, resetting
            the foreground color to the previous value
            </summary>
        </member>
        <member name="M:System.TConsole.WriteColored(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes colored text to the console, resetting the foreground color to the
            previous value
            </summary>
        </member>
        <member name="M:System.TConsole.WriteLineColored(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes colored text lines to the console, resetting the foreground color to
            the previous value
            </summary>
        </member>
        <member name="M:System.TConsole.WriteHighlighted(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes highlighted text to the console, resetting the background color to the
            previous value
            </summary>
        </member>
        <member name="M:System.TConsole.WriteLineHighlighted(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes highlighted text lines to the console, resetting the background color
            to the previous value
            </summary>
        </member>
        <member name="M:System.TConsole.WriteColored(System.ConsoleColor,System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes both highlighted and colored text to the console, resetting both values
            to the previous
            </summary>
        </member>
        <member name="M:System.TConsole.WriteLineColored(System.ConsoleColor,System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes both highlighted and colored text lines to the console, resetting both
            values to the previous
            </summary>
        </member>
        <member name="T:System.TEnums">
            <summary>
            Provides useful extensions to enums
            </summary>
        </member>
        <member name="M:System.TEnums.Parse``1(System.String)">
            <summary>
            Cleaner syntax for Enum.Parse(type, string)
            </summary>
        </member>
        <member name="T:System.TMath">
            <summary>
            Provides useful extensions to numerical types
            </summary>
        </member>
        <member name="M:System.TMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a given integer between a minimum and maximum
            </summary>
        </member>
        <member name="M:System.TMath.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Clamps a given short between a minimum and maximum
            </summary>
        </member>
        <member name="T:System.TDateTime">
            <summary>
            Provides useful extensions to DateTime
            </summary>
        </member>
        <member name="M:System.TDateTime.SecondsToNow(System.DateTime)">
            <summary>
            Returns an integer amount of seconds difference between DateTime.Now and
            this DateTime value
            </summary>
        </member>
        <member name="T:System.TString">
            <summary>
            Provides useful extensions to strings
            </summary>
        </member>
        <member name="M:System.TString.TerseSplit(System.String,System.Char[])">
            <summary>
            Shortcut to string.Split(char[]) that removes empty entries by default
            </summary>
        </member>
        <member name="M:System.TString.TerseSplit(System.String,System.String[])">
            <summary>
            Shortcut to string.Split(string[]) that removes empty entries by default
            </summary>
        </member>
        <member name="M:System.TString.IEquals(System.String,System.String)">
            <summary>
            Case-insensitive string equality shortcut (current culture)
            </summary>
        </member>
        <member name="M:System.TString.LFormat(System.String,System.Object[])">
            <summary>
            Shortcut to string.Format, so that string literals can easily be formatted
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.TRegex">
            <summary>
            Provides useful extensions to the Regex class
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.TRegex.ToArray(System.Text.RegularExpressions.Match)">
            <summary>
            Converts all groups of a match to simple string array
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.TRegex.IsMatch(System.String,System.String)">
            <summary>
            Shortcut to Regex.IsMatch() with auto case-insensitivity
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.TRegex.TryMatch(System.Text.RegularExpressions.Regex,System.String,System.String[]@)">
            <summary>
            Shortcut to using Regex.Match in if conditionals
            </summary>
            <param name="regex">Regex object to match</param>
            <param name="input">String to try find matches in</param>
            <param name="matches">Outputs a list of matches, null if unsuccessful</param>
            <returns>True on success, false otherwise</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.TRegex.TryMatch(System.String,System.String,System.String[]@)">
            <summary>
            Shortcut of Regex.TryMatch extension, which creates a regex that assumes
            IgnoreCase
            </summary>
            <param name="input">String to try find matches in</param>
            <param name="pattern">Regex pattern to match</param>
            <param name="matches">Outputs a list of matches, null if successful</param>
            <returns>True on success, false otherwise</returns>
        </member>
    </members>
</doc>
