<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VP.NET</name>
    </assembly>
    <members>
        <member name="T:VP.InstanceTerrain">
            <summary>
            Container class for Instance's terrain-related members
            </summary>
        </member>
        <member name="M:VP.InstanceTerrain.SetNode(VP.TerrainNode,System.Int32,System.Int32)">
            <summary>
            Sets a terrain node data to world
            </summary>
        </member>
        <member name="M:VP.InstanceTerrain.QueryTile(System.Int32,System.Int32,System.Int32[0:,0:])">
            <summary>
            Queries a tile, using a 2 dimensional array of node revisions for versioning.
            Fires the GetNode event after each node received
            </summary>
        </member>
        <member name="M:VP.Instance.Wait(System.Int32)">
            <summary>
            Pumps incoming events, fires any registered events or callbacks, then sleeps
            for the given amount of milliseconds.
            </summary>
        </member>
        <member name="M:VP.Instance.Login(VP.Uniserver,System.String,System.String,System.String)">
            <summary>
            Logs into a specified universe with the given authentication details and
            bot name. Chainable.
            </summary>
        </member>
        <member name="M:VP.Instance.Login(System.String,System.String,System.String)">
            <summary>
            Logs into the default Virtual Paradise universe with the given authentication
            details. Chainable.
            </summary>
        </member>
        <member name="M:VP.Instance.Login(System.String,System.String)">
            <summary>
            Logs into the default Virtual Paradise universe with the given authentication
            details and initialized bot name. Chainable.
            </summary>
        </member>
        <member name="M:VP.Instance.Enter(System.String)">
            <summary>
            Enters a given world, chainable
            </summary>
        </member>
        <member name="M:VP.Instance.GoTo(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updates the bot's own position and rotation
            </summary>
        </member>
        <member name="M:VP.Instance.GoTo(VP.AvatarPosition)">
            <summary>
            Updates the bot's own position and rotation using an AvatarPosition
            </summary>
        </member>
        <member name="M:VP.Instance.Leave">
            <summary>
            Leaves the current world
            </summary>
        </member>
        <member name="M:VP.Instance.Say(System.String)">
            <summary>
            Sends a chat message to the current world
            </summary>
        </member>
        <member name="M:VP.Instance.Say(System.String,System.Object[])">
            <summary>
            Sends a formatted chat message to current world
            </summary>
        </member>
        <member name="M:VP.Instance.ConsoleMessage(System.Int32,VP.ChatTextEffect,VP.Color,System.String,System.String)">
            <summary>
            Sends a broadcast-like message with custom styling to a specific session
            </summary>
        </member>
        <member name="M:VP.Instance.ConsoleMessage(System.Int32,VP.ChatTextEffect,VP.Color,System.String,System.String,System.Object[])">
            <summary>
            Sends a formatted broadcast-like message with custom styling to a specific
            session
            </summary>
        </member>
        <member name="M:VP.Instance.ConsoleBroadcast(VP.ChatTextEffect,VP.Color,System.String,System.String)">
            <summary>
            Sends a broadcast-like message with custom styling to everybody in-world
            </summary>
        </member>
        <member name="M:VP.Instance.ConsoleBroadcast(VP.ChatTextEffect,VP.Color,System.String,System.String,System.Object[])">
            <summary>
            Sends a formatted broadcast-like message with custom styling to everybody
            in-world
            </summary>
        </member>
        <member name="M:VP.Instance.ConsoleMessage(System.Int32,System.String,System.String)">
            <summary>
            Sends a broadcast-like message with default styling to a specific session
            </summary>
        </member>
        <member name="M:VP.Instance.ConsoleMessage(System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Sends a formatted broadcast-like message with default styling to a specific
            session
            </summary>
        </member>
        <member name="M:VP.Instance.ConsoleBroadcast(System.String,System.String)">
            <summary>
            Sends a broadcast-like message with default styling to everybody in-world
            </summary>
        </member>
        <member name="M:VP.Instance.ConsoleBroadcast(System.String,System.String,System.Object[])">
            <summary>
            Sends a formatted broadcast-like message with default styling to everybody
            in-world
            </summary>
        </member>
        <member name="F:VP.Instance.Data">
            <summary>
            Methods, events and properties related to metadata collection
            </summary>
        </member>
        <member name="F:VP.Instance.Avatars">
            <summary>
            Methods, events and properties related to users and avatars
            </summary>
        </member>
        <member name="F:VP.Instance.Property">
            <summary>
            Methods, events and properties related to property and object handling,
            including queries
            </summary>
        </member>
        <member name="F:VP.Instance.Terrain">
            <summary>
            Methods, events and properties related to terrain modificaton and queries
            </summary>
        </member>
        <member name="M:VP.Instance.#ctor">
            <summary>
            Creates a bot instance, initializing the SDK automatically
            </summary>
        </member>
        <member name="M:VP.Instance.#ctor(System.String)">
            <summary>
            Creates a bot instance with a given name, initializing the SDK automatically
            </summary>
        </member>
        <member name="M:VP.Instance.Dispose">
            <summary>
            Disposes of the bot by destorying it natively, then disposes of all
            containers.
            </summary>
        </member>
        <member name="T:VP.InstanceAvatars">
            <summary>
            Container class for Instance's avatar-related members
            </summary>
        </member>
        <member name="M:VP.InstanceAvatars.Click(System.Int32)">
            <summary>
            Sends a click event to an avatar by session number
            </summary>
        </member>
        <member name="M:VP.InstanceAvatars.Teleport(System.Int32,System.String,VP.Vector3,System.Single,System.Single)">
            <summary>
            Teleports a target session to a specified world and position
            </summary>
        </member>
        <member name="M:VP.InstanceAvatars.Teleport(System.Int32,System.String,VP.AvatarPosition)">
            <summary>
            Teleports a target session to a specified world and AvatarPosition
            </summary>
        </member>
        <member name="M:VP.InstanceAvatars.Teleport(System.Int32,VP.Vector3,System.Single,System.Single)">
            <summary>
            Teleports a target session to a specified position in the same world
            </summary>
        </member>
        <member name="M:VP.InstanceAvatars.Teleport(System.Int32,VP.AvatarPosition)">
            <summary>
            Teleports a target session to a specified AvatarPosition in the same world
            </summary>
        </member>
        <member name="T:VP.InstanceData">
            <summary>
            Container for SDK methods and properties related to data collection, such as
            world and user metadata
            </summary>
        </member>
        <member name="T:VP.InstanceProperty">
            <summary>
            Container class for Instance's property-related members
            </summary>
        </member>
        <member name="M:VP.InstanceProperty.QueryCell(System.Int32,System.Int32)">
            <summary>
            Queries a cell for objects and fires QueryCellResult for each object returned
            and QueryCellEnd when finished
            </summary>
            <param name="cellX"></param>
            <param name="cellZ"></param>
        </member>
        <member name="M:VP.InstanceProperty.AddObject(VP.VPObject)">
            <summary>
            Adds a raw vpObject to the world
            </summary>
            <param name="vpObject">New instance of vpObject with model and position set</param>
        </member>
        <member name="M:VP.InstanceProperty.AddObject(System.String,VP.Vector3,VP.Quaternion)">
            <summary>
            Creates and adds a new vpObject
            </summary>
            <param name="model">Model name</param>
            <param name="position">Vector3 position</param>
            <param name="rotation">Quaternion rotation</param>
        </member>
        <member name="M:VP.InstanceProperty.AddObject(System.String,VP.Vector3)">
            <summary>
            Creates and adds a new vpObject with default rotation
            </summary>
            <param name="model">Model name</param>
            <param name="position">Vector3 position</param>
        </member>
        <member name="M:VP.InstanceProperty.DeleteObject(VP.VPObject)">
            <summary>
            Deletes a given object
            </summary>
            <param name="vpObject">Object to delete</param>
        </member>
        <member name="M:VP.InstanceProperty.ClickObject(VP.VPObject)">
            <summary>
            Sends a click event on a given object
            </summary>
            <param name="vpObject">Object to click</param>
        </member>
        <member name="M:VP.InstanceProperty.OnObjectCreate(System.IntPtr)">
            <summary>
            Note: The native VP SDK uses the ObjectCreate event for query cell results
            </summary>
        </member>
        <member name="M:VP.Native.DataConverters.TerrainNodeData(System.Byte[])">
            <summary>
            Converts terrain node data to a 2D TerrainCell array
            </summary>
        </member>
        <member name="M:VP.Avatar.#ctor(System.IntPtr)">
            <summary>
            Creates an Avatar from a native instance's attributes
            </summary>
        </member>
        <member name="P:VP.Avatar.IsBot">
            <summary>
            Checks if the avatar belongs to a bot instance, i.e. if the name is surrounded
            in square brackets
            </summary>
        </member>
        <member name="P:VP.Avatar.Coordinates">
            <summary>
            Gets or sets the coordinates of this avatar as a Vector3
            </summary>
        </member>
        <member name="P:VP.Avatar.Position">
            <summary>
            Gets or sets the position of this avatar as an AvatarPosition
            </summary>
        </member>
        <member name="M:VP.ChatMessage.#ctor(System.IntPtr)">
            <summary>
            Creates a Chat from a native instance's attributes
            </summary>
        </member>
        <member name="M:VP.ConsoleMessage.#ctor(System.IntPtr)">
            <summary>
            Creates a ConsoleMessage from a native instance's attributes
            </summary>
        </member>
        <member name="M:VP.AvatarPosition.#ctor(System.String)">
            <summary>
            Creates an avatar position from a comma-seperated list
            </summary>
        </member>
        <member name="M:VP.AvatarPosition.ToString">
            <summary>
            Formats the position to a pretty formatted comma-seperated list
            </summary>
        </member>
        <member name="P:VP.AvatarPosition.Coordinates">
            <summary>
            Gets or sets a Vector3 value for coordinates
            </summary>
        </member>
        <member name="M:VP.Color.#ctor(System.IntPtr)">
            <summary>
            Creates a Color from a native instance's attributes
            </summary>
        </member>
        <member name="M:VP.ObjectClick.#ctor(System.IntPtr)">
            <summary>
            Creates a click from a native instance's attributes
            </summary>
        </member>
        <member name="M:VP.AvatarClick.#ctor(System.IntPtr)">
            <summary>
            Creates a click from a native instance's attributes
            </summary>
        </member>
        <member name="F:VP.TerrainPosition.GlobalCellX">
            <summary>
            Global cell X coordinate
            </summary>
        </member>
        <member name="F:VP.TerrainPosition.GlobalCellZ">
            <summary>
            Global cell Z coordinate
            </summary>
        </member>
        <member name="F:VP.TerrainPosition.CellX">
            <summary>
            Cell X coordinate relative to node
            </summary>
        </member>
        <member name="F:VP.TerrainPosition.CellZ">
            <summary>
            Cell Z coordinate relative to node
            </summary>
        </member>
        <member name="F:VP.TerrainPosition.NodeX">
            <summary>
            Node X relative to tile
            </summary>
        </member>
        <member name="F:VP.TerrainPosition.NodeZ">
            <summary>
            Node Z relative to tile
            </summary>
        </member>
        <member name="F:VP.TerrainPosition.TileX">
            <summary>
            Global tile X relative to world
            </summary>
        </member>
        <member name="F:VP.TerrainPosition.TileZ">
            <summary>
            Global tile Z relative to world
            </summary>
        </member>
        <member name="M:VP.TerrainPosition.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a fully calculated terrain position from world coordinates
            </summary>
        </member>
        <member name="M:VP.TerrainPosition.CellToTile(System.Int32)">
            <summary>
            Gets tile number from a global cell
            </summary>
        </member>
        <member name="M:VP.TerrainPosition.CellToLocal(System.Int32)">
            <summary>
            Gets a global cell's local coordinate reletive to tile
            </summary>
        </member>
        <member name="M:VP.TerrainPosition.CellToNode(System.Int32)">
            <summary>
            Gets a global cell's local coordinate relative to node
            </summary>
        </member>
        <member name="M:VP.TerrainNode.#ctor(System.IntPtr)">
            <summary>
            Creates a terrain node from an instances' attributes and byte array
            </summary>
        </member>
        <member name="P:VP.TerrainNode.Item(System.Int32)">
            <summary>
            Gets or sets a TerrainCell value based on one-dimensional index, in column-major
            order (e.g. TerrainNode[5] = col 0, row 5)
            </summary>
        </member>
        <member name="P:VP.TerrainNode.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a TerrainCell value based on two-dimensional index
            </summary>
        </member>
        <member name="F:VP.TerrainTile.BaseRevision">
            <summary>
            A 2D array of revision numbers to force the server to send even unmodified
            terrain nodes back
            </summary>
        </member>
        <member name="P:VP.TerrainTile.Item(System.Int32)">
            <summary>
            Gets or sets a TerrainNode object based on one-dimensional index, in column-major
            order (e.g. TerrainTile[4] = col 1, row 0)
            </summary>
        </member>
        <member name="P:VP.TerrainTile.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a TerrainNode object based on two-dimensional index.
            Automatically sets the node's X, Y and Parent value
            </summary>
        </member>
        <member name="M:VP.User.#ctor(System.IntPtr)">
            <summary>
            Creates user from native attributes
            </summary>
        </member>
        <member name="F:VP.VPObject.Id">
            <summary>
            ID number of the object in the world; automatically set by the server
            </summary>
        </member>
        <member name="F:VP.VPObject.Time">
            <summary>
            Timestamp of the object's last modification
            </summary>
        </member>
        <member name="F:VP.VPObject.Owner">
            <summary>
            Owner's account number
            </summary>
        </member>
        <member name="F:VP.VPObject.Position">
            <summary>
            Position of the object in the world
            </summary>
        </member>
        <member name="F:VP.VPObject.Rotation">
            <summary>
            Quaternion (3 axis + angle) rotation
            </summary>
        </member>
        <member name="M:VP.VPObject.#ctor(System.IntPtr)">
            <summary>
            Creates a VPObject from a native instance's attributes
            </summary>
        </member>
        <member name="M:VP.VPObject.ToNative(System.IntPtr)">
            <summary>
            Applies the properties of this object to the native SDK's attributes
            </summary>
        </member>
        <member name="M:VP.World.#ctor(System.IntPtr)">
            <summary>
            Creates world metadata from native attributes
            </summary>
        </member>
        <member name="F:VP.WorldAttributes.ObjectPath">
            <summary>
            Gets or sets the object path. db key: objectpath
            </summary>
            <value>
            The object path.
            </value>
            <Author>8/5/2012 6:27 PM cube3</Author>
        </member>
        <member name="F:VP.WorldAttributes.EnableTerrain">
            <summary>
            Gets or sets a value indicating whether to enable terrain. db key: terrain
            </summary>
            <value>
              <c>true</c> if [enable terrain]; otherwise, <c>false</c>.
            </value>
            <Author>8/5/2012 6:28 PM cube3</Author>
        </member>
        <member name="F:VP.WorldAttributes.TerrainScale">
            <summary>
            Gets or sets the terrain scale. db key: terrainkey
            </summary>
            <value>
            The terrain scale.
            </value>
            <Author>8/5/2012 6:28 PM cube3</Author>
        </member>
        <member name="F:VP.WorldAttributes.GroundModel">
            <summary>
            Gets or sets the ground model. db key: gound
            </summary>
            <value>
            The ground model.
            </value>
            <Author>8/5/2012 6:28 PM cube3</Author>
        </member>
        <member name="F:VP.WorldAttributes.Skybox">
            <summary>
            Gets or sets the skybox. The skybox is the name of the skybox. The world server will automatically look for jpg images and append the following:
            _
            </summary>
            <value>
            The skybox.
            </value>
            <Author>8/5/2012 6:30 PM cube3</Author>
        </member>
        <member name="M:VP.Vector3.ToString">
            <summary>
            Formats the vector to a comma-seperated list
            </summary>
        </member>
        <member name="T:VP.Native.Callbacks">
            <summary>
            Native callback types
            </summary>
        </member>
        <member name="T:VP.Native.ReasonCode">
            <summary>
            Reason Codes
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.Success">
            <summary>
            Operation Successfull
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.VersionMismatch">
            <summary>
            Incorrect API Version
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.NotInitialized">
            <summary>
            Instance not initalized
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.AlreadyInitialized">
            <summary>
            Instance already initialized
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.StringTooLong">
            <summary>
            String too long
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.InvalidPassword">
            <summary>
            Invalid password
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.WorldNotFound">
            <summary>
            World not found
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.WorldLoginError">
            <summary>
            World login error
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.NotInWorld">
            <summary>
            Not in world
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.ConnectionError">
            <summary>
            Connection error
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.NoInstance">
            <summary>
            No instance
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.NotImplemented">
            <summary>
            Not immplemented
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.NoSuchAttribute">
            <summary>
            No such attribute available
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.NotAllowed">
            <summary>
            Operation not allowed
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.DatabaseError">
            <summary>
            Universe database error
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.NoSuchUser">
            <summary>
            No such user exists
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.Timeout">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.NotInUniverse">
            <summary>
            Currently not in universe
            </summary>
        </member>
        <member name="F:VP.Native.ReasonCode.InvalidArguments">
            <summary>
            Invalid arguments provided
            </summary>
        </member>
        <member name="M:VP.Native.Utf8StringToManaged.CleanUpNativeData(System.IntPtr)">
            <summary>
            Do nothing, for some reason CleanUpNativeData is called for pointers
            that are not even created by the marshaler. This can 
            cause heap corruption because of double free or because a different
            allocater may have been used to allocate the memory block.
            </summary>
            <param name="pNativeData"></param>
        </member>
    </members>
</doc>
